{"pageProps":{"member":{"id":"nishisuke","nickname":"にっしー","realName":"西上良祐","bio":"Tech Lead - Go, React, Flutter","avatarSrc":"/avatars/nishisuke.jpeg","sources":["https://zenn.dev/nishisuke/feed"],"twitterUsername":"_nishisuke","githubUsername":"nishisuke","websiteUrl":"https://zenn.dev/nishisuke"},"postItems":[{"title":"database/sql と GORMコードリーディング","contentSnippet":"今週はGoのdatabase/sqlパッケージとGORMのコードリーディングというタイトルでQiitaの方に投稿しました！QiitaでGo強化月間が行われていたためです。QiitaとZennで両方記事を書いていて感じた違いがあったので共有します。ZennだとGithubのファイルやラインを参照するリンクを貼った時にコードを埋め込んでくれてとても便利でした！Qiitaではこれは行われなかったので面倒でした。","link":"https://zenn.dev/nishisuke/articles/go-sql-and-gorm","isoDate":"2022-08-19T02:55:43.000Z","dateMiliSeconds":1660877743000,"authorName":"にっしー","authorId":"nishisuke"},{"title":"GraphQL調査 ~実装編~","contentSnippet":"前回はgqlgenを利用してGraphQLを最低限動かし、N+1クエリ問題に対処しました。今回は前回残していた以下三つの課題を実装します。セキュリティ課題への対処。ページネーションの実装React, TSによるクライアントサイドの実装 セキュリティ課題への対処。スキーマによっては攻撃者が自由に重い処理を走らせることができます。考えられる主なケースとしては以下です。多重(無限)ネスト重い処理を複数回実行 多重(無限)ネスト{  user {    friends {      friends {        friends {         ...","link":"https://zenn.dev/nishisuke/articles/graphql-step2","isoDate":"2022-08-12T12:38:09.000Z","dateMiliSeconds":1660307889000,"authorName":"にっしー","authorId":"nishisuke"},{"title":"GraphQL調査","contentSnippet":"目的本番環境でGraphQLを使うコスト感を知る。どんなサービスでなら使用しやすいかを知る。 環境macOSMonterey 12.2.1x86_64go1.18gqlgendataloadergorm今回はgqlgenでgraphql schemaからgoのコードを生成します。色々調べたけどライブラリはgqlgen一択だと感じました。 まずは動かす 準備cf. https://gqlgen.com/mkdir examplecd examplegit initgo mod init exampleprintf '// +build t...","link":"https://zenn.dev/nishisuke/articles/graphql-step1","isoDate":"2022-08-05T09:07:45.000Z","dateMiliSeconds":1659690465000,"authorName":"にっしー","authorId":"nishisuke"},{"title":"【完成版】Goのコード生成を利用してユニットテストを書く方法","contentSnippet":"完成コードhttps://github.com/nishisuke/example-go-generate-tests 前回https://zenn.dev/nishisuke/articles/go-generate-unit-test前回では以下の課題が残ったままでした。モックのDIgotestsをモックが使用できるように生成されてテストテンプレートを編集する必要がある。errが返ってほしいとき、具体的に何のエラーが返ったかのテスト今回はこれを解決し、完成版として紹介します。 環境macOSMonterey 12.2.1x86_64go1.18...","link":"https://zenn.dev/nishisuke/articles/go-unit-test-with-code-generation","isoDate":"2022-07-29T12:01:39.000Z","dateMiliSeconds":1659096099000,"authorName":"にっしー","authorId":"nishisuke"},{"title":"初めてのOSS貢献！ ~誰でもできる30分でドキュメント修正編~","contentSnippet":"学び(TL;DR)ソースコードとドキュメントは同一レポジトリに。できればコードと同一ファイルに。ドキュメント修正でも、正しいコードの理解が必要。 本編人生で初めてOSSに作成したPull Requestがマージされました。ドキュメント修正です。変更は1行。 PRhttps://github.com/chakra-ui/chakra-ui-docs/pull/695 今回OSS貢献に至った一番の理由それは会社の個人OKRにOSSコミットがあった。からです。OKRとして定義したことで、常に心の片隅に意識がありました。この意識がなければ今回のドキュメン...","link":"https://zenn.dev/nishisuke/articles/4c99350a378f4a","isoDate":"2022-07-22T10:17:45.000Z","dateMiliSeconds":1658485065000,"authorName":"にっしー","authorId":"nishisuke"},{"title":"Goのコード生成を利用してユニットテストを書く方法","contentSnippet":"読んでわかること入出力を保証するユニットテストのテンプレートを自動生成する方法。 私が考えるテストのテンプレートを自動生成メリットテストケースに集中できる。テストコードが統一される。テスト追加を忘れない。テストを書く手間が省ける。 テスト対象前提として今回はユニットテストです。引数がaのときの出力がbであることの保証をします。internal/usecases/user_usecase.gopackage usecasesimport \"sample/internal/models\"type (\tUserUsecase struct {\t\tus...","link":"https://zenn.dev/nishisuke/articles/go-generate-unit-test","isoDate":"2022-07-15T05:48:23.000Z","dateMiliSeconds":1657864103000,"authorName":"にっしー","authorId":"nishisuke"}]},"__N_SSG":true}